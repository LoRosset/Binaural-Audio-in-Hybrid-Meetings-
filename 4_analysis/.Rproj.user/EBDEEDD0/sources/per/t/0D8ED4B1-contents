library(faraway)
library(car)
library(lmerTest)
library(dplyr)
library(doBy)
library(emmeans)
library(sjlabelled)
library(lme4)# for glmer
library(lmerTest)
library(ordinal) # for clmm 
library(RVAideMemoire) # for Anova.clmm 
library(fitdistrplus)
library(coin)
# random effects: https://ourcodingclub.github.io/tutorials/mixed-models/
# nice explaination: https://mfviz.com/hierarchical-models/

all_measures_per_participant <- read.csv("~/Desktop/Loic/Thesis_new/4_analysis/eyetracking_analysis/all_measures_per_participant_patche3.csv", comment.char="#")

all_measures_per_participant <- within(all_measures_per_participant, {
  mask <- factor(mask)
  sound <- factor(Sound)
  pid <- factor(PID)
})
par(cex = .6)

# verify the order is correct
summaryBy(ScoreCompTest ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))
summaryBy(mean_dissimilarity ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

# ScoreMemTest
## test poisson distribution
df <- all_measures_per_participant
fa = fitdist(df[df$sound == "mono",]$ScoreMemTest, "pois") # create fit for X.a 
gofstat(fa) 
fb = fitdist(df[df$sound == "binaural",]$ScoreMemTest, "pois") # create fit for X.b
gofstat(fb)
fc = fitdist(df[df$sound == "head",]$ScoreMemTest, "pois") # create fit for X.c
gofstat(fc)
## all p < 0.05 indicating violation of poisson distribution

lm_ScoreMemTest <- lm(ScoreMemTest ~ mask*sound, data = all_measures_per_participant)
emmip(lm_ScoreMemTest, mask ~ sound,CIs=TRUE, xlab="Sound", ylab ="Mean of number of correct answer (max 6)")

summaryBy(ScoreMemTest ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_ScoreMemTest <- glmer(ScoreMemTest ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=poisson)
Anova(glmm_ScoreMemTest, type=3)
## let's use the binomial model results
# all_measures_per_participant$ScoreMemTest_normalized <- all_measures_per_participant$ScoreMemTest/max(all_measures_per_participant$ScoreMemTest, na.rm = TRUE)
# glmm_ScoreMemTest <- glmer(ScoreMemTest_normalized ~ mask * sound + (1|pid), data = all_measures_per_participant, family=binomial)
# Anova(glmm_ScoreMemTest, type=3)

# MemConfidence
lm_MemConfidence <- lm(MemConfidence ~ mask*sound, data = all_measures_per_participant)
emmip(lm_MemConfidence, mask ~ sound,CIs=TRUE, xlab="Sound", ylab ="Likert's scale (1 - 5)")

summaryBy(MemConfidence ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$MemConfidence = ordered(all_measures_per_participant$MemConfidence) # ordinal response 
glmm_MemConfidence <- clmm(MemConfidence ~ mask * sound + (1 | pid), data = all_measures_per_participant) 
Anova.clmm(glmm_MemConfidence, type=3)

# ScoreCompTest 
## test poisson distribution
hist(all_measures_per_participant$ScoreCompTest)

df <- all_measures_per_participant
fa = fitdist(df[df$sound == "mono",]$ScoreCompTest, "pois") # create fit for X.a 
gofstat(fa) 
fb = fitdist(df[df$sound == "binaural",]$ScoreCompTest, "pois") # create fit for X.b
gofstat(fb)
fc = fitdist(df[df$sound == "head",]$ScoreCompTest, "pois") # create fit for X.c
gofstat(fc)
## all p < 0.05 indicating violation of poisson distribution

lm_ScoreCompTest <- lm(ScoreCompTest ~ mask*sound, data = all_measures_per_participant)
emmip(lm_ScoreCompTest, mask ~ sound,CIs=TRUE, xlab="Sound", ylab ="Mean of number of correct answer (max 6)")

summaryBy(ScoreCompTest ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

# Friedman test
data_test=all_measures_per_participant[all_measures_per_participant$mask=="yes",]
# data_test$ScoreCompTest = factor(data_test$ScoreCompTest) # X is a 2-level factor
wsrt_ScoreCompTest <- friedman_test(ScoreCompTest ~ sound | pid, data=data_test, distribution="asymptotic")
wsrt_ScoreCompTest
# 
# glmm_ScoreCompTest <- glmer(ScoreCompTest ~ sound + (1 | pid), data = data_test, family=poisson)
# Anova(glmm_ScoreCompTest, type=3)

glmm_ScoreCompTest <- glmer(ScoreCompTest ~ mask * sound + ( 1 | pid), data = all_measures_per_participant, family=poisson)
Anova(glmm_ScoreCompTest, type=3)
## let's use the binomial model results
# all_measures_per_participant$ScoreCompTest_normalized <- all_measures_per_participant$ScoreCompTest/max(all_measures_per_participant$ScoreCompTest, na.rm = TRUE)
# glmm_ScoreCompTest <- glmer(ScoreCompTest_normalized ~ mask * sound + (1|pid), data = all_measures_per_participant, family=binomial)
# Anova(glmm_ScoreCompTest, type=3)
# summary(glmm_ScoreCompTest)

lmm_ScoreCompTest <- lmer(ScoreCompTest ~ mask * sound + (1 | pid), data = all_measures_per_participant)
summary(lmm_ScoreCompTest)
anova(lmm_ScoreCompTest)

# CompConfidence
lm_CompConfidence <- lm(CompConfidence ~ mask*sound, data = all_measures_per_participant)
emmip(lm_CompConfidence, mask ~ sound,CIs=TRUE, xlab="Sound", ylab ="Likert's scale (1 - 5)")

summaryBy(CompConfidence ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

lmm_CompConfidence <- lmer(CompConfidence ~ mask * sound + (1 | pid), data = all_measures_per_participant)
anova(lmm_CompConfidence)

all_measures_per_participant$CompConfidence_ordinal = ordered(all_measures_per_participant$CompConfidence) # ordinal response 
glmm_CompConfidence <- clmm(CompConfidence_ordinal ~ mask * sound + (1 | pid), data = all_measures_per_participant) 
summary(glmm_CompConfidence)
Anova.clmm(glmm_CompConfidence, type=3)


# PostSpeakerIdent
with(all_measures_per_participant, interaction.plot(mask, sound, PostSpeakerIdent,
                                                    ylim = c(0, 6), lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of PostSpeakerIdent", xlab = "mask", trace.label = "sound"))

summaryBy(PostSpeakerIdent ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$PostSpeakerIdent <- all_measures_per_participant$PostSpeakerIdent/max(all_measures_per_participant$PostSpeakerIdent, na.rm = TRUE)
glmm_PostSpeakerIdent <- lmer(PostSpeakerIdent ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=binomial)
Anova(glmm_PostSpeakerIdent, type=3)

# PostOverallComprehension
with(all_measures_per_participant, interaction.plot(mask, sound, PostOverallComprehension,
                                                    ylim = c(0, 6), lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of PostOverallComprehension", xlab = "mask", trace.label = "sound"))

summaryBy(PostOverallComprehension ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$PostOverallComprehension <- all_measures_per_participant$PostOverallComprehension/max(all_measures_per_participant$PostOverallComprehension, na.rm = TRUE)
glmm_PostOverallComprehension <- lmer(PostOverallComprehension ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=binomial)
Anova(glmm_PostOverallComprehension,type=3 )

# PostConcentration 
with(all_measures_per_participant, interaction.plot(mask, sound, PostConcentration,
                                                    ylim = c(0, 6), lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of PostConcentration", xlab = "mask", trace.label = "sound"))

summaryBy(PostConcentration ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$PostConcentration <- all_measures_per_participant$PostConcentration/max(all_measures_per_participant$PostConcentration, na.rm = TRUE)
glmm_PostConcentration <- lmer(PostConcentration ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=binomial)
Anova(glmm_PostConcentration,type=3)

# PostPresence 
with(all_measures_per_participant, interaction.plot(mask, sound, PostPresence,
                                                    ylim = c(0, 6), lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of PostPresence", xlab = "mask", trace.label = "sound"))

summaryBy(PostPresence ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$PostPresence <- all_measures_per_participant$PostPresence/max(all_measures_per_participant$PostPresence, na.rm)
glmm_PostPresence <- lmer(PostPresence ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=binomial)
Anova(glmm_PostPresence,type=3)

# PostAudioHelp 
with(all_measures_per_participant, interaction.plot(mask, sound, PostAudioHelp,
                                                    ylim = c(0, 6), lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of PostAudioHelp", xlab = "mask", trace.label = "sound"))

summaryBy(PostAudioHelp ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

all_measures_per_participant$PostAudioHelp <- all_measures_per_participant$PostAudioHelp/max(all_measures_per_participant$PostAudioHelp, na.rm)
glmm_PostAudioHelp <- lmer(PostAudioHelp ~ mask * sound + (1 | pid), data = all_measures_per_participant, family=binomial)
Anova(glmm_PostAudioHelp,type=3)

########### eye-tracking ############
# nb_fixation 
with(all_measures_per_participant, interaction.plot(mask, sound, nb_fixation,
                                                    lwd = 3, col = 1:3,
                                                    ylab = "mean of nb_fixation", xlab = "mask", trace.label = "sound"))


summaryBy(nb_fixation ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(nb_fixation ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(nb_fixation ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_nb_fixation <- lmer(nb_fixation ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_nb_fixation)
BIC(glmm_nb_fixation)
summary(glmm_nb_fixation)
anova(glmm_nb_fixation)

# Friedman test
# yes p-value = 0.1524; no p-value = 0.3951
data_test=all_measures_per_participant[all_measures_per_participant$mask=="yes",]
wsrt_nb_fixation <- friedman_test(nb_fixation ~ sound | pid, data=data_test, distribution="asymptotic")
wsrt_nb_fixation

# Friedman test - check validity of the questions
mono_mem <- read.csv("~/Desktop/Loic/Michael_mono_42/mem_mono.csv", comment.char="#")
mono_mem <- within(mono_mem, {
  dialog_id <- factor(Dialog_ID)
  pid <- factor(PID)
})
par(cex = .6)
freid_mem <- friedman_test(Mem_Score ~ dialog_id | pid, data=mono_mem, distribution="asymptotic")
freid_mem # p-value = 0.01066
summaryBy(Mem_Score ~ dialog_id, data = mono_mem, 
          FUN = list(mean, max, min, median, sd))
# GLMM
contrasts(mono_mem$dialog_id) <-"contr.sum"
glmm_mem <- glmer(Mem_Score ~ dialog_id + ( 1 | pid), data = mono_mem, family=poisson)
Anova(glmm_mem, type=3) # chisq = 5.3603  DF = 5     p = 0.3735 
overdisp_fun(glmm_ScoreCompTest) # no overdispersion as the ratio is lower than 1


mono_comp <- read.csv("~/Desktop/Loic/Michael_mono_42/comp_mono.csv", comment.char="#")
mono_comp <- within(mono_comp, {
  dialog_id <- factor(Dialog_ID)
  pid <- factor(PID)
})
par(cex = .6)
freid_comp <- friedman_test(Comp_Score ~ dialog_id | pid, data=mono_comp, distribution="asymptotic")
freid_comp # p-value = 5.283e-09
summaryBy(Comp_Score ~ dialog_id, data = mono_comp, 
          FUN = list(mean, median))
contrasts(mono_comp$dialog_id) <-"contr.sum"
glmm_comp <- glmer(Comp_Score ~ dialog_id + ( 1 | pid), data = mono_comp, family=poisson)
Anova(glmm_comp, type=3) # chisq = 4.7278  DF = 5     p = 0.45 
overdisp_fun(glmm_ScoreCompTest) # no overdispersion as the ratio is lower than 1


summaryBy(ScoreMemTest ~ dialog_ID, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

contrasts(all_measures_per_participant$dialog_ID) <-"contr.sum"
glmm_dialog_ScoreMemTest <- glmer(ScoreMemTest ~ dialog_ID + ( 1 | pid), data = all_measures_per_participant, family=poisson)
Anova(glmm_dialog_ScoreMemTest, type=3) # chisq = 5.3603  DF = 5     p = 0.3735 

summaryBy(ScoreCompTest ~ dialog_ID, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))
contrasts(all_measures_per_participant$dialog_ID) <-"contr.sum"
glmm_dialog_ScoreCompTest <- glmer(ScoreCompTest ~ dialog_ID + ( 1 | pid), data = all_measures_per_participant, family=poisson)
Anova(glmm_dialog_ScoreCompTest, type=3) # chisq = 5.3603  DF = 5     p = 0.3735 


library(reshape2) # for dcast
df2 <-dcast(data_test, nb_fixation ~ sound, value.var="nb_fixation") # make wide-format table
ab = wilcox.test(df2$binaural, df2$mono, paired=TRUE) # a vs. b
ac = wilcox.test(df2$head, df2$mono, paired=TRUE) # a vs. c
bc= wilcox.test(df2$head, df2$binaural, paired=TRUE) # b vs. c
p.adjust(c(ab$p.value, ac$p.value, bc$p.value), method="bonferroni")

library(multcomp) # for glht
library(emmeans) # for emm, emmeans
summary(glht(glmm_nb_fixation, emm(pairwise ~ mask * sound)), test=adjusted(type="bonferroni"))

# worse AIC/BIC
# glmm_nb_fixation2 <- lmer(nb_fixation ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_nb_fixation2)
# BIC(glmm_nb_fixation2)
# summary(glmm_nb_fixation2)
# anova(glmm_nb_fixation2)

# mean_fix_duration 
with(all_measures_per_participant, interaction.plot(mask, sound, mean_fix_duration,
                                                    lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of mean_fix_duration", xlab = "mask", trace.label = "sound"))


summaryBy(mean_fix_duration ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_fix_duration ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_fix_duration ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_mean_fix_duration <- lmer(mean_fix_duration ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_mean_fix_duration)
BIC(glmm_mean_fix_duration)
summary(glmm_mean_fix_duration)
anova(glmm_mean_fix_duration)

# worse AIC/BIC
# glmm_mean_fix_duration2 <- lmer(mean_fix_duration ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_mean_fix_duration2)
# BIC(glmm_mean_fix_duration2)
# summary(glmm_mean_fix_duration2)
# anova(glmm_mean_fix_duration2)




# total_fix_duration
with(all_measures_per_participant, interaction.plot(mask, sound, total_fix_duration,
                                                    lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of total_fix_duration", xlab = "mask", trace.label = "sound"))


summaryBy(total_fix_duration ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(total_fix_duration ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(total_fix_duration ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_total_fix_duration <- lmer(total_fix_duration ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_total_fix_duration)
BIC(glmm_total_fix_duration)
summary(glmm_total_fix_duration)
anova(glmm_total_fix_duration)

# worse AIC/BIC
# glmm_total_fix_duration2 <- lmer(total_fix_duration ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_total_fix_duration2)
# BIC(glmm_total_fix_duration2)
# summary(glmm_total_fix_duration2)
# anova(glmm_total_fix_duration2)

# mean_saccade_amplitude 
with(all_measures_per_participant, interaction.plot(mask, sound, mean_saccade_amplitude,
                                                    lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of mean_saccade_amplitude", xlab = "mask", trace.label = "sound"))


summaryBy(mean_saccade_amplitude ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_saccade_amplitude ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_saccade_amplitude ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_mean_saccade_amplitude <- lmer(mean_saccade_amplitude ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_mean_saccade_amplitude)
BIC(glmm_mean_saccade_amplitude)
summary(glmm_mean_saccade_amplitude)
anova(glmm_mean_saccade_amplitude)

# worse AIC/BIC
# glmm_mean_saccade_amplitude2 <- lmer(mean_saccade_amplitude ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_mean_saccade_amplitude2)
# BIC(glmm_mean_saccade_amplitude2)
# summary(glmm_mean_saccade_amplitude2)
# anova(glmm_mean_saccade_amplitude2)

# mean_dissimilarity 
with(all_measures_per_participant, interaction.plot(mask, sound, mean_dissimilarity,
                                                    lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of mean_dissimilarity", xlab = "mask", trace.label = "sound"))


summaryBy(mean_dissimilarity ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_dissimilarity ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(mean_dissimilarity ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_mean_dissimilarity <- lmer(mean_dissimilarity ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_mean_dissimilarity)
BIC(glmm_mean_dissimilarity)
summary(glmm_mean_dissimilarity)
anova(glmm_mean_dissimilarity)

# worse AIC/BIC
# glmm_mean_dissimilarity2 <- lmer(mean_dissimilarity ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_mean_dissimilarity2)
# BIC(glmm_mean_dissimilarity2)
# summary(glmm_mean_dissimilarity2)
# anova(glmm_mean_dissimilarity2)

# ratio_aoi_transitions 
with(all_measures_per_participant, interaction.plot(mask, sound, ratio_aoi_transitions,
                                                    lty= c(1, 12), lwd = 3, col = 1:3,
                                                    ylab = "mean of ratio_aoi_transitions", xlab = "mask", trace.label = "sound"))


summaryBy(ratio_aoi_transitions ~ mask, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(ratio_aoi_transitions ~ sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

summaryBy(ratio_aoi_transitions ~ mask+sound, data = all_measures_per_participant, 
          FUN = list(mean, max, min, median, sd))

glmm_ratio_aoi_transitions <- lmer(ratio_aoi_transitions ~ mask * sound + (1 | pid), data = all_measures_per_participant)
AIC(glmm_ratio_aoi_transitions)
BIC(glmm_ratio_aoi_transitions)
summary(glmm_ratio_aoi_transitions)
anova(glmm_ratio_aoi_transitions)

## not better when factoring in sound as random effect slope: higher AIC/BIC
# glmm_ratio_aoi_transitions2 <- lmer(ratio_aoi_transitions ~ mask * sound + (1 + sound | pid), data = all_measures_per_participant)
# AIC(glmm_ratio_aoi_transitions2)
# BIC(glmm_ratio_aoi_transitions2)
# summary(glmm_ratio_aoi_transitions2)
# anova(glmm_ratio_aoi_transitions2)





